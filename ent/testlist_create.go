// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/testlist"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rs/xid"
)

// TestListCreate is the builder for creating a TestList entity.
type TestListCreate struct {
	config
	mutation *TestListMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tlc *TestListCreate) SetCreatedAt(t time.Time) *TestListCreate {
	tlc.mutation.SetCreatedAt(t)
	return tlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tlc *TestListCreate) SetNillableCreatedAt(t *time.Time) *TestListCreate {
	if t != nil {
		tlc.SetCreatedAt(*t)
	}
	return tlc
}

// SetUpdatedAt sets the "updated_at" field.
func (tlc *TestListCreate) SetUpdatedAt(t time.Time) *TestListCreate {
	tlc.mutation.SetUpdatedAt(t)
	return tlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tlc *TestListCreate) SetNillableUpdatedAt(t *time.Time) *TestListCreate {
	if t != nil {
		tlc.SetUpdatedAt(*t)
	}
	return tlc
}

// SetName sets the "name" field.
func (tlc *TestListCreate) SetName(s string) *TestListCreate {
	tlc.mutation.SetName(s)
	return tlc
}

// SetValidFrom sets the "valid_from" field.
func (tlc *TestListCreate) SetValidFrom(t time.Time) *TestListCreate {
	tlc.mutation.SetValidFrom(t)
	return tlc
}

// SetValidTo sets the "valid_to" field.
func (tlc *TestListCreate) SetValidTo(t time.Time) *TestListCreate {
	tlc.mutation.SetValidTo(t)
	return tlc
}

// SetID sets the "id" field.
func (tlc *TestListCreate) SetID(x xid.ID) *TestListCreate {
	tlc.mutation.SetID(x)
	return tlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tlc *TestListCreate) SetNillableID(x *xid.ID) *TestListCreate {
	if x != nil {
		tlc.SetID(*x)
	}
	return tlc
}

// Mutation returns the TestListMutation object of the builder.
func (tlc *TestListCreate) Mutation() *TestListMutation {
	return tlc.mutation
}

// Save creates the TestList in the database.
func (tlc *TestListCreate) Save(ctx context.Context) (*TestList, error) {
	var (
		err  error
		node *TestList
	)
	tlc.defaults()
	if len(tlc.hooks) == 0 {
		if err = tlc.check(); err != nil {
			return nil, err
		}
		node, err = tlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tlc.check(); err != nil {
				return nil, err
			}
			tlc.mutation = mutation
			if node, err = tlc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(tlc.hooks) - 1; i >= 0; i-- {
			if tlc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tlc *TestListCreate) SaveX(ctx context.Context) *TestList {
	v, err := tlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlc *TestListCreate) Exec(ctx context.Context) error {
	_, err := tlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlc *TestListCreate) ExecX(ctx context.Context) {
	if err := tlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlc *TestListCreate) defaults() {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		v := testlist.DefaultCreatedAt()
		tlc.mutation.SetCreatedAt(v)
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		v := testlist.DefaultUpdatedAt()
		tlc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tlc.mutation.ID(); !ok {
		v := testlist.DefaultID()
		tlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tlc *TestListCreate) check() error {
	if _, ok := tlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TestList.created_at"`)}
	}
	if _, ok := tlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TestList.updated_at"`)}
	}
	if _, ok := tlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TestList.name"`)}
	}
	if _, ok := tlc.mutation.ValidFrom(); !ok {
		return &ValidationError{Name: "valid_from", err: errors.New(`ent: missing required field "TestList.valid_from"`)}
	}
	if _, ok := tlc.mutation.ValidTo(); !ok {
		return &ValidationError{Name: "valid_to", err: errors.New(`ent: missing required field "TestList.valid_to"`)}
	}
	return nil
}

func (tlc *TestListCreate) sqlSave(ctx context.Context) (*TestList, error) {
	_node, _spec := tlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*xid.ID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (tlc *TestListCreate) createSpec() (*TestList, *sqlgraph.CreateSpec) {
	var (
		_node = &TestList{config: tlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: testlist.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: testlist.FieldID,
			},
		}
	)
	if id, ok := tlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tlc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := tlc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := tlc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testlist.FieldName,
		})
		_node.Name = value
	}
	if value, ok := tlc.mutation.ValidFrom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldValidFrom,
		})
		_node.ValidFrom = value
	}
	if value, ok := tlc.mutation.ValidTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldValidTo,
		})
		_node.ValidTo = value
	}
	return _node, _spec
}

// TestListCreateBulk is the builder for creating many TestList entities in bulk.
type TestListCreateBulk struct {
	config
	builders []*TestListCreate
}

// Save creates the TestList entities in the database.
func (tlcb *TestListCreateBulk) Save(ctx context.Context) ([]*TestList, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tlcb.builders))
	nodes := make([]*TestList, len(tlcb.builders))
	mutators := make([]Mutator, len(tlcb.builders))
	for i := range tlcb.builders {
		func(i int, root context.Context) {
			builder := tlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TestListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tlcb *TestListCreateBulk) SaveX(ctx context.Context) []*TestList {
	v, err := tlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tlcb *TestListCreateBulk) Exec(ctx context.Context) error {
	_, err := tlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlcb *TestListCreateBulk) ExecX(ctx context.Context) {
	if err := tlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
