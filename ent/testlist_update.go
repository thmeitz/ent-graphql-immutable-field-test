// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/testlist"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TestListUpdate is the builder for updating TestList entities.
type TestListUpdate struct {
	config
	hooks    []Hook
	mutation *TestListMutation
}

// Where appends a list predicates to the TestListUpdate builder.
func (tlu *TestListUpdate) Where(ps ...predicate.TestList) *TestListUpdate {
	tlu.mutation.Where(ps...)
	return tlu
}

// SetUpdatedAt sets the "updated_at" field.
func (tlu *TestListUpdate) SetUpdatedAt(t time.Time) *TestListUpdate {
	tlu.mutation.SetUpdatedAt(t)
	return tlu
}

// SetName sets the "name" field.
func (tlu *TestListUpdate) SetName(s string) *TestListUpdate {
	tlu.mutation.SetName(s)
	return tlu
}

// SetValidTo sets the "valid_to" field.
func (tlu *TestListUpdate) SetValidTo(t time.Time) *TestListUpdate {
	tlu.mutation.SetValidTo(t)
	return tlu
}

// Mutation returns the TestListMutation object of the builder.
func (tlu *TestListUpdate) Mutation() *TestListMutation {
	return tlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tlu *TestListUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	tlu.defaults()
	if len(tlu.hooks) == 0 {
		affected, err = tlu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tlu.mutation = mutation
			affected, err = tlu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tlu.hooks) - 1; i >= 0; i-- {
			if tlu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tlu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tlu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tlu *TestListUpdate) SaveX(ctx context.Context) int {
	affected, err := tlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tlu *TestListUpdate) Exec(ctx context.Context) error {
	_, err := tlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tlu *TestListUpdate) ExecX(ctx context.Context) {
	if err := tlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tlu *TestListUpdate) defaults() {
	if _, ok := tlu.mutation.UpdatedAt(); !ok {
		v := testlist.UpdateDefaultUpdatedAt()
		tlu.mutation.SetUpdatedAt(v)
	}
}

func (tlu *TestListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testlist.Table,
			Columns: testlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: testlist.FieldID,
			},
		},
	}
	if ps := tlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tlu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldUpdatedAt,
		})
	}
	if value, ok := tlu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testlist.FieldName,
		})
	}
	if value, ok := tlu.mutation.ValidTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldValidTo,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TestListUpdateOne is the builder for updating a single TestList entity.
type TestListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TestListMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tluo *TestListUpdateOne) SetUpdatedAt(t time.Time) *TestListUpdateOne {
	tluo.mutation.SetUpdatedAt(t)
	return tluo
}

// SetName sets the "name" field.
func (tluo *TestListUpdateOne) SetName(s string) *TestListUpdateOne {
	tluo.mutation.SetName(s)
	return tluo
}

// SetValidTo sets the "valid_to" field.
func (tluo *TestListUpdateOne) SetValidTo(t time.Time) *TestListUpdateOne {
	tluo.mutation.SetValidTo(t)
	return tluo
}

// Mutation returns the TestListMutation object of the builder.
func (tluo *TestListUpdateOne) Mutation() *TestListMutation {
	return tluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tluo *TestListUpdateOne) Select(field string, fields ...string) *TestListUpdateOne {
	tluo.fields = append([]string{field}, fields...)
	return tluo
}

// Save executes the query and returns the updated TestList entity.
func (tluo *TestListUpdateOne) Save(ctx context.Context) (*TestList, error) {
	var (
		err  error
		node *TestList
	)
	tluo.defaults()
	if len(tluo.hooks) == 0 {
		node, err = tluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TestListMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tluo.mutation = mutation
			node, err = tluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tluo.hooks) - 1; i >= 0; i-- {
			if tluo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tluo *TestListUpdateOne) SaveX(ctx context.Context) *TestList {
	node, err := tluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tluo *TestListUpdateOne) Exec(ctx context.Context) error {
	_, err := tluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tluo *TestListUpdateOne) ExecX(ctx context.Context) {
	if err := tluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tluo *TestListUpdateOne) defaults() {
	if _, ok := tluo.mutation.UpdatedAt(); !ok {
		v := testlist.UpdateDefaultUpdatedAt()
		tluo.mutation.SetUpdatedAt(v)
	}
}

func (tluo *TestListUpdateOne) sqlSave(ctx context.Context) (_node *TestList, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   testlist.Table,
			Columns: testlist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: testlist.FieldID,
			},
		},
	}
	id, ok := tluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TestList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, testlist.FieldID)
		for _, f := range fields {
			if !testlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != testlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tluo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldUpdatedAt,
		})
	}
	if value, ok := tluo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: testlist.FieldName,
		})
	}
	if value, ok := tluo.mutation.ValidTo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: testlist.FieldValidTo,
		})
	}
	_node = &TestList{config: tluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{testlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
