// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateTestListInput represents a mutation input for creating testlists.
type CreateTestListInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	ValidFrom time.Time
	ValidTo   time.Time
}

// Mutate applies the CreateTestListInput on the TestListCreate builder.
func (i *CreateTestListInput) Mutate(m *TestListCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetValidFrom(i.ValidFrom)
	m.SetValidTo(i.ValidTo)
}

// SetInput applies the change-set in the CreateTestListInput on the create builder.
func (c *TestListCreate) SetInput(i CreateTestListInput) *TestListCreate {
	i.Mutate(c)
	return c
}

// UpdateTestListInput represents a mutation input for updating testlists.
type UpdateTestListInput struct {
	UpdatedAt *time.Time
	Name      *string
	ValidTo   *time.Time
}

// Mutate applies the UpdateTestListInput on the TestListMutation.
func (i *UpdateTestListInput) Mutate(m *TestListMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ValidTo; v != nil {
		m.SetValidTo(*v)
	}
}

// SetInput applies the change-set in the UpdateTestListInput on the update builder.
func (u *TestListUpdate) SetInput(i UpdateTestListInput) *TestListUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTestListInput on the update-one builder.
func (u *TestListUpdateOne) SetInput(i UpdateTestListInput) *TestListUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Age       int
	Name      string
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetAge(i.Age)
	m.SetName(i.Name)
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	UpdatedAt *time.Time
	Age       *int
	Name      *string
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Age; v != nil {
		m.SetAge(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
