// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/bug/ent/testlist"
	"entgo.io/ent/dialect/sql"
	"github.com/rs/xid"
)

// TestList is the model entity for the TestList schema.
type TestList struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ValidFrom holds the value of the "valid_from" field.
	ValidFrom time.Time `json:"valid_from,omitempty"`
	// ValidTo holds the value of the "valid_to" field.
	ValidTo time.Time `json:"valid_to,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TestList) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case testlist.FieldName:
			values[i] = new(sql.NullString)
		case testlist.FieldCreatedAt, testlist.FieldUpdatedAt, testlist.FieldValidFrom, testlist.FieldValidTo:
			values[i] = new(sql.NullTime)
		case testlist.FieldID:
			values[i] = new(xid.ID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TestList", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TestList fields.
func (tl *TestList) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case testlist.FieldID:
			if value, ok := values[i].(*xid.ID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tl.ID = *value
			}
		case testlist.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tl.CreatedAt = value.Time
			}
		case testlist.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tl.UpdatedAt = value.Time
			}
		case testlist.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				tl.Name = value.String
			}
		case testlist.FieldValidFrom:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_from", values[i])
			} else if value.Valid {
				tl.ValidFrom = value.Time
			}
		case testlist.FieldValidTo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field valid_to", values[i])
			} else if value.Valid {
				tl.ValidTo = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TestList.
// Note that you need to call TestList.Unwrap() before calling this method if this TestList
// was returned from a transaction, and the transaction was committed or rolled back.
func (tl *TestList) Update() *TestListUpdateOne {
	return (&TestListClient{config: tl.config}).UpdateOne(tl)
}

// Unwrap unwraps the TestList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tl *TestList) Unwrap() *TestList {
	tx, ok := tl.config.driver.(*txDriver)
	if !ok {
		panic("ent: TestList is not a transactional entity")
	}
	tl.config.driver = tx.drv
	return tl
}

// String implements the fmt.Stringer.
func (tl *TestList) String() string {
	var builder strings.Builder
	builder.WriteString("TestList(")
	builder.WriteString(fmt.Sprintf("id=%v", tl.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(tl.Name)
	builder.WriteString(", valid_from=")
	builder.WriteString(tl.ValidFrom.Format(time.ANSIC))
	builder.WriteString(", valid_to=")
	builder.WriteString(tl.ValidTo.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TestLists is a parsable slice of TestList.
type TestLists []*TestList

func (tl TestLists) config(cfg config) {
	for _i := range tl {
		tl[_i].config = cfg
	}
}
